*nvimgdb.txt*  GDB and LLDB integration into neovim

TBD

==============================================================================
CONTENTS                                                     *NvimgdbContents*

    1. Usage ................ |NvimgdbUsage|
    2. Commands ............. |NvigdbCommands|
    3. Mappings ............. |NvimgdbMappings|
    4. Variables............. |NvimgdbVariables|
    5. Limitations........... |NvimgdbLimitations|
    6. Trivia ............... |NvimgdbTrivia|

==============================================================================
Section 1: Usage                                                *NvimgdbUsage*

This plugin will facilitate debugging programs with GDB or LLDB. It will
automatically show debugged source code, breakpoints, and define convenient
keymaps similar to Qt Creator and Microsoft Visual Studio.

To start debugging, execute `:GdbStart` command with GDB launch string as
parameter: >

    :GdbStart gdb -q -f a.out

or alternatively `:GdbStartLLDB` with LLDB launch string as parameter: >

    :GdbStartLLDB lldb a.out

This will open a new tab with debugging view: horizontal split with source
code and terminal. Then the whole set of commands will be available.

NOTE: Ensure the flag `-f` is passed to GDB for proper integration. Without it,
      source code wouldn't be displayed in neovim window.

The plugin performs configuration on the first stop of the debugger. If you
launch by attaching to already running program, the first stop won't open the
source code location of the frame. To catch up, just navigate around the call
stack with `:GdbFrameUp` and `:GdbFrameDown`.

To quit debugging, either close one of the debugger windows or execute the
command `:GdbDebugStop`.

==============================================================================
Section 2: Commands                                          *NvimgdbCommands*

                                                                   *:GdbStart*
:GdbStart [command]     Start debugging session with the given GDB launch
                        command.

                                                               *:GdbStartLLDB*
:GdbStartLLDB [cmd]     Start debugging session with the given LLDB launch
                        command.

                                                               *:GdbDebugStop*
:GdbDebugStop           Quit the debugging session. This command is implicitly
                        executed if you close either of the windows created by
                        the debugger.

                                                        *:GdbBreakpointToggle*
                                                      *:GdbBreakpointClearAll*
:GdbBreakpointToggle    Manage breakpoints in the code: toggle, clear all
:GdbBreakpointClearAll

                                                                *:GdbContinue*
                                                                    *:GdbNext*
                                                                    *:GdbStep*
                                                                  *:GdbFinish*
:GdbContinue            Continue execution
:GdbNext                Step over next statement
:GdbStep                Step into next statement
:GdbFinish              Step out current stack frame

                                                                 *:GdbFrameUp*
                                                               *:GdbFrameDown*
:GdbFrameUp             Navigate up/down one stack frame
:GdbFrameDown

                                                               *:GdbInterrupt*
:GdbInterrupt          Break program execution into the debugger

                                                                *:GdbEvalWord*
                                                               *:GdbEvalRange*
:GdbEvalWord           Evaluate |<cword>| or |[range]|
:<range>GdbEvalRange

==============================================================================
Section 3: Mappings                                          *NvimgdbMappings*

The following mappings are defined initially:

<leader>dd             Fill in command to start debugging with GDB, you will
                       still need to enter <cr> to execute it.

<leader>dl             Fill in command to start debugging with LLDB, you will
                       still need to enter <cr> to execute it.

When debugging session has started, the following mappings are defined:

<f5>                   Continue                       (`:GdbContinue`)
<f10>                  Next                           (`:GdbNext`)
<f11>                  Step                           (`:GdbStep`)
<f12>                  Finish                         (`:GdbFinish`)
<f8>                   Toggle breakpoint              (`:GdbBreakpointToggle`)
<c-p>                  Frame Up                       (`:GdbFrameUp`)
<c-n>                  Frame Down                     (`:GdbFrameDown`)
<f9>                   NORMAL: Evaluate word under cursor (`:GdbEvalWord`)
                       VISUAL: Evaluate the range         (`:GdbEvalRange`)

==============================================================================
Section 4: Variables                                        *NvimgdbVariables*

The following variables could be defined to change default mappings for the
debugging commands:

g:nvimgdb_key_continue
g:nvimgdb_key_next
g:nvimgdb_key_step
g:nvimgdb_key_finish
g:nvimgdb_key_breakpoint
g:nvimgdb_key_frameup
g:nvimgdb_key_framedown
g:nvimgdb_key_eval

==============================================================================
Section 5: Limitations                                    *NvimgdbLimitations*

- The plugin is sensitive to the debugger settings. If prompt or frame format
  is changed, the errors may occur.

- LLDB uses the same frame format in multiple different situations. The
  command "thread backtrace", for instance, will cause jumps in the source
  code. Workaround: execute "frame info" in the debugger or
  `:GdbFrameUp` followed by `:GdbFrameDown`.

==============================================================================
Section 6: Trivia                                              *NvimgdbTrivia*

License inherits from neovim's.

Patches are welcome to https://github.com/sakhnik/nvim-gdb.vim

The original version was taken from nvim source code (Thiago de Arruda)
https://github.com/neovim/neovim/blob/master/contrib/gdb/neovim_gdb.vim

 vim: set tw=78 ts=8 ft=help norl:
